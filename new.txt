# name: sashimi
function fish_prompt
  set -l last_status $status
  set -l cyan (set_color -o cyan)
  set -l yellow (set_color -o yellow)
  set -g red (set_color -o red)
  set -g blue (set_color -o blue)
  set -l lime (set_color -o "00FF5B")
  set -l purple (set_color -o purple)

  set -g normal (set_color normal)

  set -g pink (set_color -o "FF2CDF")
  set -g magenta (set_color -o magenta)
  set -g b_blue (set_color -o "0014FF")
  set -g purple_blue (set_color -o "2D27FF")
  set -g red_pink (set_color -o "FF0A6C")
  set -l text_white (set_color -o white)
  set -l bbbblue (set_color -o "2BBEF2")
  set -l lilian "👑 lili"
  set liliblue "$bbbblue$lilian$normal"
  set -l ahead (_git_ahead)
  set -g whitespace ' '

  set -l dir (command echo $PWD | sed -n '/\//s/Users\/lilian.ludford\///p')
  set working_directory "($lime✨ $dir$normal)"

  if test $last_status = 0
    set initial_indicator "$b_blue◆"
    set status_indicator "$cyan❯$cyan❯$cyan❯"
  else
    set initial_indicator "$red_pink✖ $last_status"
    set status_indicator "$red_pink❯$red_pink❯$red_pink❯"
  end
  set initial_indicator "$initial_indicator$normal"
  set -l cwd $magenta (command pwd)$normal

  if [ (_git_branch_name) ]
    set -l git_branch (_git_branch_name)
    if test (_git_branch_name) = 'master'
      set git_color "$red"
    else
      set git_color "$pink"
    end

    if [ (_is_git_dirty) ]
      set -l dirty "$yellow ✗"
      set git_info "$dirty"
    end
    set -l diff (git_diff)
    set git_info "$git_color$git_branch$git_info"
    set l_bracket "$normal ["

    set git_info "$normal(💜 $git_info $normal)$diff$normal"
  end

  # Notify if a command took more than 5 minutes
  if [ "$CMD_DURATION" -gt 300000 ]
    echo The last command took (math "$CMD_DURATION/1000") seconds.
  end

  echo -n -s [$initial_indicator] [$liliblue] $working_directory $git_info  $whitespace $normal $blue $status_indicator $whitespace
end

function _git_ahead
  set -l commits (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)
  if [ $status != 0 ]
    return
  end
  set -l behind (count (for arg in $commits; echo $arg; end | grep '^<'))
  set -l ahead  (count (for arg in $commits; echo $arg; end | grep -v '^<'))
  switch "$ahead $behind"
    case ''     # no upstream
    case '0 0'  # equal to upstream
      return
    case '* 0'  # ahead of upstream
      echo "$blue↑$normal_c$ahead$whitespace"
    case '0 *'  # behind upstream
      echo "$red↓$normal_c$behind$whitespace"
    case '*'    # diverged from upstream
      echo "$blue↑$normal$ahead $red↓$normal_c$behind$whitespace"
  end
end

function _git_branch_name
  echo (command git symbolic-ref HEAD 2>/dev/null | sed -e 's|^refs/heads/||')
end

function _is_git_dirty
  echo (command git status -s --ignore-submodules=dirty 2>/dev/null)
END

